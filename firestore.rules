// C:\your-project\firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn() { return request.auth != null; }
    function isOwner(uid) { return signedIn() && request.auth.uid == uid; }

    /* ---------- users profile ---------- */
    match /users/{uid} {
      allow read: if true;
      allow create, update: if isOwner(uid);
    }

    /* ---------- public gallery metadata (per user) ---------- */
    match /users/{uid}/public_photos/{pid} {
      allow read: if true;

      // create only with the allowed fields; timestamps must be server time
      allow create: if isOwner(uid) &&
                    request.resource.data.keys().hasOnly(
                      ['owner','url','createdAt','updatedAt','caption']
                    ) &&
                    request.resource.data.owner == uid &&
                    request.resource.data.url is string &&
                    request.resource.data.url.size() > 6 &&
                    (
                      !('caption' in request.resource.data) ||
                      (request.resource.data.caption is string &&
                       request.resource.data.caption.size() <= 140)
                    ) &&
                    request.resource.data.createdAt == request.time &&
                    request.resource.data.updatedAt == request.time;

      // update only allows caption + updatedAt to change
      allow update: if isOwner(uid) &&
                    request.resource.data.keys().hasOnly(
                      ['owner','url','createdAt','updatedAt','caption']
                    ) &&
                    request.resource.data.owner == resource.data.owner &&
                    request.resource.data.url == resource.data.url &&
                    request.resource.data.createdAt == resource.data.createdAt &&
                    request.resource.data.updatedAt == request.time;

      // owner can delete
      allow delete: if isOwner(uid);
    }

    /* ---------- presence (online/typing/lastSeen) ---------- */
    match /presence/{uid} {
      allow read: if true;
      allow create, update, delete: if isOwner(uid);
    }

    /* ---------- chat threads + messages ---------- */
    match /threads/{tid} {
      // (you can tighten this later by verifying participants)
      allow read, create, update, delete: if signedIn();

      match /messages/{mid} {
        allow read: if signedIn();
        // only allow the sender to create; createdAt must be server time
        allow create: if signedIn() &&
                      request.resource.data.from == request.auth.uid &&
                      request.resource.data.createdAt == request.time;
        // disallow edits
        allow update: if false;
        // sender may delete their message
        allow delete: if signedIn() && resource.data.from == request.auth.uid;
      }
    }

    /* ---------- likes (flat or inbox/outbox) ---------- */
    match /likes/{document=**} {
      allow read, write: if signedIn();
    }

    /* ---------- limits / streaks / misc app docs ---------- */
    match /limits/{uid} {
      allow read, write: if isOwner(uid);
    }
    match /streaks/{uid} {
      allow read, write: if isOwner(uid);
    }

    /* ---------- interests catalog (read-only to clients) ---------- */
    match /interests/{iid} {
      allow read: if true;
      allow write: if false; // set to false after you seed the list
    }

    /* ---------- fallback (read-only for signed-in) ---------- */
    match /{document=**} {
      allow read: if signedIn();
    }
  }
}
